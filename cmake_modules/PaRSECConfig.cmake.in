set(PARSEC_VERSION @PARSEC_VERSION_MAJOR@.@PARSEC_VERSION_MINOR@.@PARSEC_VERSION_RELEASE@)

# Required for check_language
include(CheckLanguage)

@PACKAGE_INIT@

set_and_check(PARSEC_DIR "${PACKAGE_PREFIX_DIR}")
set_and_check(PARSEC_INCLUDE_DIRS "@PACKAGE_PARSEC_INSTALL_INCLUDEDIR@")
set_and_check(PARSEC_CMAKE_DIRS "@PACKAGE_PARSEC_INSTALL_CMAKEDIR@")
set_and_check(PARSEC_LIBRARY_DIRS "@PACKAGE_PARSEC_INSTALL_LIBDIR@")
set_and_check(PARSEC_BINARY_DIRS "@PACKAGE_PARSEC_INSTALL_BINDIR@")
set(PARSEC_LIBEXEC_DIRS "@PACKAGE_PARSEC_INSTALL_LIBEXECDIR@") # This is optional, may not exist in the installdir

# Pull the dependencies
list(APPEND CMAKE_PREFIX_PATH "${PARSEC_CMAKE_DIRS}")
list(APPEND CMAKE_MODULE_PATH "${PARSEC_CMAKE_DIRS}")

find_package(Threads)

if(@PARSEC_HAVE_HWLOC@)
  set_and_check(HWLOC_INCLUDE_DIR "@HWLOC_INCLUDE_DIR@")
  set(HWLOC_INCLUDE_DIR ${HWLOC_INCLUDE_DIR} CACHE PATH "Imported by PaRSECConfig.cmake" FORCE)
  set_and_check(HWLOC_LIBRARY "@HWLOC_LIBRARY@")
  set(HWLOC_LIBRARY ${HWLOC_LIBRARY} CACHE PATH "Imported by PaRSECConfig.cmake" FORCE)
  find_package(HWLOC REQUIRED MODULE)
endif(@PARSEC_HAVE_HWLOC@)

if(@PARSEC_HAVE_OTF2@)
  # Nothing exportable here, if this test succeed then PaRSEC supports OTF2 output.
  if( "@OTF2_CONFIG_PATH@" )
    set_and_check(OTF2_CONFIG_PATH "@OTF2_CONFIG_PATH@")
  elseif("@OTF2_DIR@")
    set_and_check(OTF2_DIR "@OTF2_DIR@")
  elseif( "@OTF2_CONFIG@" )
    cmake_path(GET "@OTF2_CONFIG@" PARENT_PATH OTF2_CONFIG_PATH_tmp)
    set_and_check(OTF2_CONFIG_PATH "${OTF2_CONFIG_PATH_tmp}")
    unset(OTF2_CONFIG_PATH_tmp)
  endif( "@OTF2_CONFIG_PATH@" )
  find_package(OTF2 @OTF2_VERSION@ REQUIRED)
endif(@PARSEC_HAVE_OTF2@)

if(@PARSEC_HAVE_PAPI@)
  set_and_check(PAPI_INCLUDE_DIR "@PAPI_INCLUDE_DIR@")
  set(PAPI_INCLUDE_DIR ${PAPI_INCLUDE_DIR} CACHE PATH "Imported by PaRSECConfig.cmake" FORCE)
  set_and_check(PAPI_LIBRARY "@PAPI_LIBRARY@")
  set(PAPI_LIBRARY ${PAPI_LIBRARY} CACHE PATH "Imported by PaRSECConfig.cmake" FORCE)
  find_package(PAPI REQUIRED MODULE)
endif(@PARSEC_HAVE_PAPI@)

if(@PARSEC_DIST_WITH_MPI@)
  # Try to find MPI::MPI_C
  if (NOT TARGET MPI::MPI_C)
    # ensure that language C is enabled
    check_language(C)
    if(CMAKE_C_COMPILER)
      enable_language(C)
    else()
      message(FATAL_ERROR "Cannot find package PaRSEC due to missing C language support; either enable_language(C) in your project or ensure that C compiler can be discovered")
    endif()
    find_package(MPI REQUIRED COMPONENTS C)
  endif(NOT TARGET MPI::MPI_C)
endif(@PARSEC_DIST_WITH_MPI@)

if(@PARSEC_HAVE_CUDA@)
  find_package(CUDAToolkit REQUIRED)
  SET(PARSEC_HAVE_CUDA TRUE)
endif(@PARSEC_HAVE_CUDA@)

if(@PARSEC_HAVE_HIP@)
  enable_language(CXX)
  find_package(HIP REQUIRED)
  SET(PARSEC_HAVE_HIP TRUE)
endif(@PARSEC_HAVE_HIP@)

if(@PARSEC_PROF_TRACE@)
  # Nothing exportable here, if this test succeed then PaRSEC supports tracing
endif(@PARSEC_PROF_TRACE@)

# Pull the PaRSEC::<targets>
if(NOT TARGET PaRSEC::parsec)
  include(${CMAKE_CURRENT_LIST_DIR}/PaRSECTargets.cmake)
endif(NOT TARGET PaRSEC::parsec)

# Populate the variables

set(PARSEC_PTGPP_FLAGS "$ENV{PTGPPFLAGS}" CACHE STRING "Flags to pass to the parsec-ptgpp executable")
set(PARSEC_PTGPP_EXECUTABLE ${PARSEC_BINARY_DIRS}/parsec-ptgpp CACHE STRING "Point to the parsec-ptgpp executable")
set(PARSEC_LIBRARIES PaRSEC::parsec CACHE STRING "List of libraries suitable for use in target_link_libraries") # for compatibility with older (non-target based) clients
