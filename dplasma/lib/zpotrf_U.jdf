extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

#if defined(PARSEC_HAVE_RECURSIVE)
#include "parsec/data_dist/matrix/subtile.h"
#include "parsec/recursive.h"
#endif

#if defined(PARSEC_HAVE_CUDA)
#include <cublas.h>
#endif  /* defined(PARSEC_HAVE_CUDA) */

/*
 * Priorities used in this jdf:
 *      - potrf_zpotrf(k)    : (MT-k)**3
 *      - potrf_zherk(k,n)   : (MT-n)**3 + 3 * (n - k)
 *      - potrf_ztrsm(n,k)   : (MT-n)**3 + 3 * (n - k) * (2 * MT - k - n - 1)
 *      - potrf_zgemm(m,n,k) : (MT-n)**3 + 3 * (n - m) * (2 * MT - m - n - 1) + 6 * (n - k)
 *
 * So max priority is:
 *      (MT - PRI_CHANGE)**3 + 3 * MT * (2 * MT - PRI_CHANGE - 1) + 6 * MT  < (MT**3 + 6 MT**2 + 3 MT)
 *
 * WARNING: If mt is greater than 1200, we might get integer overflow.
 */

%}

/* Globals
 */
uplo       [type = PLASMA_enum]
descA      [type = "parsec_tiled_matrix_dc_t*"]
INFO       [type = "int*"]

PRI_CHANGE [type = "int" hidden = on default = 0 ]
PRI_MAX    [type = "int" hidden = on default = "(descA->mt * ( 3 + descA->mt * ( 2 + descA->mt )))" ]
smallnb    [type = "int" hidden = on default = "descA->mb" ]

/**************************************************
 *               potrf_zpotrf                     *
 **************************************************/
potrf_zpotrf(k) [high_priority = on]

// Execution space
k = 0 .. descA->nt-1

// Parallel partitioning
:descA(k, k)

// Parameters
RW T <- (k == 0) ? descA(k, k) : T potrf_zherk(k-1, k)
     -> T potrf_ztrsm(k, k+1..descA->nt-1)
     -> descA(k, k)

; (k >= (descA->nt - PRI_CHANGE)) ? (descA->nt - k) * (descA->nt - k) * (descA->nt - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempkn = k == descA->nt-1 ? descA->n - k*descA->nb : descA->nb;
    int iinfo = 0;

    if (tempkn > smallnb)
    {
        subtile_desc_t *small_descT;
        parsec_taskpool_t *parsec_zpotrf;

        small_descT = subtile_desc_create( descA, k, k,
                                           smallnb, smallnb, 0, 0, tempkn, tempkn );
        small_descT->mat = T;

        parsec_zpotrf = dplasma_zpotrf_New(uplo, (parsec_tiled_matrix_dc_t *)small_descT, &iinfo );

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zpotrf, dplasma_zpotrf_Destruct,
                             1, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempkn = k == descA->nt-1 ? descA->n - k*descA->nb : descA->nb;
    int iinfo = 0;
    int ldak = BLKLDD( descA, k );

#if !defined(PARSEC_DRY_RUN)
    CORE_zpotrf(uplo, tempkn, T, ldak, &iinfo );

    if( iinfo != 0 && *INFO == 0 )
        *INFO = k*descA->nb+iinfo; /* Should return here */
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d) return info = %d\n",
             k,
             plasma_const(uplo), tempkn, k, k, T, ldak, iinfo );
}
END


/**************************************************
 *               potrf_ztrsm                      *
 **************************************************/
potrf_ztrsm(k, n) [high_priority = on]

// Execution space
k = 0   .. descA->nt-2
n = k+1 .. descA->nt-1

// Parallel partitioning
: descA(k, n)

// Parameters
READ  T <- T potrf_zpotrf(k)
RW    C <- (k == 0) ? descA(k, n) : C potrf_zgemm(k, n, k-1)
        -> A potrf_zherk(k, n)
        -> A potrf_zgemm(n, n+1..descA->nt-1, k)
        -> B potrf_zgemm(k+1..n-1, n, k)
        -> descA(k, n)

; (n >= (descA->nt - PRI_CHANGE)) ? (descA->nt - n) * (descA->nt - n) * (descA->nt - n) + 3 * ((2 * descA->nt) - k - n - 1) * (n - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;

    if ( (tempnn > smallnb) || (descA->mb > smallnb) )
    {
        subtile_desc_t *small_descT;
        subtile_desc_t *small_descC;
        parsec_taskpool_t* parsec_ztrsm;


        small_descT = subtile_desc_create( descA, k, k,
                                           smallnb, smallnb, 0, 0, descA->mb, descA->mb );
        small_descT->mat = T;

        small_descC = subtile_desc_create( descA, k, n,
                                           smallnb, smallnb, 0, 0, descA->mb, tempnn );
        small_descC->mat = C;

        parsec_ztrsm = dplasma_ztrsm_New(PlasmaLeft, PlasmaUpper,
                                        PlasmaConjTrans, PlasmaNonUnit,
                                        (parsec_complex64_t)1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descT,
                                        (parsec_tiled_matrix_dc_t *)small_descC );

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_ztrsm, dplasma_ztrsm_Destruct,
                             2, small_descT, small_descC );

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;
    int ldak = BLKLDD( descA, k );


#if !defined(PARSEC_DRY_RUN)
    CORE_ztrsm(PlasmaLeft, PlasmaUpper, PlasmaConjTrans, PlasmaNonUnit,
               descA->mb, tempnn,
               (parsec_complex64_t)1.0, T /*A(k, k)*/, ldak,
                                       C /*A(k, n)*/, ldak);
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             k, n,
             plasma_const( PlasmaLeft ), plasma_const( PlasmaUpper ),
             plasma_const( PlasmaConjTrans ), plasma_const( PlasmaNonUnit ),
             descA->mb, tempnn,
             1.0, k, k, T, ldak,
                  k, n, C, ldak);
}
END


/**************************************************
 *               potrf_zherk                      *
 **************************************************/
potrf_zherk(k, n) [high_priority = on]

// Execution space
k = 0   .. descA->nt-2
n = k+1 .. descA->nt-1

// Parallel partitioning
: descA(n, n)

//Parameters
READ  A <- C potrf_ztrsm(k, n)
RW    T <- (k == 0)   ? descA(n, n) : T potrf_zherk(k-1, n)
        -> (n == k+1) ? T potrf_zpotrf(n)  : T potrf_zherk(k+1, n)

; (n >= (descA->nt - PRI_CHANGE)) ? (descA->nt - n) * (descA->nt - n) * (descA->nt - n) + 3 * (n - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempnn = n == descA->nt-1 ? descA->n - n*descA->nb : descA->nb;

    if ( (tempnn > smallnb) || (descA->mb > smallnb) )
    {
        subtile_desc_t *small_descT;
        subtile_desc_t *small_descA;
        parsec_taskpool_t* parsec_zherk;

        small_descT = subtile_desc_create( descA, n, n,
                                           smallnb, smallnb, 0, 0, tempnn, tempnn );
        small_descT->mat = T;

        small_descA = subtile_desc_create( descA, k, n,
                                           smallnb, smallnb, 0, 0, descA->mb, tempnn );
        small_descA->mat = A;

        parsec_zherk = dplasma_zherk_New( PlasmaUpper, PlasmaConjTrans,
                                         (double)-1.0, (parsec_tiled_matrix_dc_t*) small_descA,
                                         (double)1.0,  (parsec_tiled_matrix_dc_t*) small_descT);

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zherk, dplasma_zherk_Destruct,
                             2, small_descA, small_descT);
        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempnn = n == descA->nt-1 ? descA->n - n*descA->nb : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldan = BLKLDD( descA, n );

#if !defined(PARSEC_DRY_RUN)
    CORE_zherk(PlasmaUpper, PlasmaConjTrans,
               tempnn, descA->mb,
               (double)-1.0, A /*A(k, n)*/, ldak,
               (double) 1.0, T /*A(n, n)*/, ldan);
#endif /* !defined(PARSEC_DRY_RUN) */
    printlog(
             "CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             k, n,
             plasma_const( PlasmaUpper ), plasma_const( PlasmaConjTrans ),
             tempnn, descA->mb,
             -1.0, k, n, A, ldak,
              1.0, n, n, T, ldan);
}
END

/**************************************************
 *               potrf_zgemm                      *
 **************************************************/
// Name
potrf_zgemm(m, n, k)

// Execution space
k = 0   .. descA->mt-3
m = k+1 .. descA->mt-1
n = m+1 .. descA->nt-1

// Parallel partitioning
: descA(m, n)

// Parameters
READ  A <- C potrf_ztrsm(k, m)
READ  B <- C potrf_ztrsm(k, n)
RW    C <- (k == 0)   ? descA(m, n)  : C potrf_zgemm(m, n, k-1)
        -> (m == k+1) ? C potrf_ztrsm(m, n) : C potrf_zgemm(m, n, k+1)

; (n >= (descA->nt - PRI_CHANGE)) ? (descA->nt - n) * (descA->nt - n) * (descA->nt - n) + 3 * ((2 * descA->nt) - m - n - 3) * (n - m) + 6 * (n - k) : PRI_MAX


BODY [type=OPENMP
      weight=(m+1-k)]
{
    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

#if !defined(PARSEC_DRY_RUN)
#if 0
#pragma omp target nowait device(parsec_body.index) depend(out: parsec_openmp_stream[0])  is_device_ptr(A, B, C)
//#pragma omp task depend(inout: parsec_openmp_stream[0])
{
    printf("Gemm %d %d %d A=%p, B=%p, C=%p device=%s event=%p (%d)\n", m, n, k, A, B, C, omp_is_initial_device()? "host": "offloaded", parsec_openmp_stream, parsec_openmp_stream[0]);
    //for(int i = 0; i < m; i++) printf("C[0][%d]=%g\n", i, ((float*)C)[i]);
#pragma omp declare target
void CORE_zgemm(PLASMA_enum transA, int transB,
                int M, int N, int K,
                PLASMA_Complex64_t alpha, const PLASMA_Complex64_t *A, int LDA,
                                          const PLASMA_Complex64_t *B, int LDB,
                PLASMA_Complex64_t beta, PLASMA_Complex64_t *C, int LDC);
#pragma omp end declare target
    CORE_zgemm(PlasmaConjTrans, PlasmaNoTrans,
               descA->mb, tempnn, descA->nb,
               (parsec_complex64_t)-1.0, A /*A(k, m)*/, ldak,
                                        B /*A(k, n)*/, ldak,
               (parsec_complex64_t) 1.0, C /*A(m, n)*/, ldam);
}
#else
    CORE_omp_zgemm(PlasmaConjTrans, PlasmaNoTrans,
                   descA->mb, tempnn, descA->nb,
                   (parsec_complex64_t)-1.0, A, ldak,
                                             B, ldak,
                   (parsec_complex64_t) 1.0, C, ldam, parsec_body.index, parsec_body.stream);
#endif
#endif  /* !defined(PARSEC_DRY_RUN) */

printf("GEMM %d %d %d is on device %d", m, n, k, parsec_body.index);
    printlog("CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             m, n, k,
             plasma_const( PlasmaConjTrans ),  plasma_const( PlasmaNoTrans ),
             descA->mb, tempnn, descA->nb,
             -1.0, k, m, A, ldak,
                   k, n, B, ldak,
              1.0, m, n, C, ldam);
}
END

BODY [type=CUDA
      dyld=cublasZgemm dyldtype=cublas_zgemm_t
      weight=(m+1-k)]
{
#if defined(PRECISION_z) || defined(PRECISION_c)
    cuDoubleComplex zone  = make_cuDoubleComplex( 1., 0.);
    cuDoubleComplex mzone = make_cuDoubleComplex(-1., 0.);
#else
    double zone  =  1.;
    double mzone = -1.;
#endif

    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    cublasStatus_t status;
    assert( ldak <= descA->mb );
    assert( ldam <= descA->mb );

    cublasSetKernelStream( parsec_body.stream );
    parsec_body.dyld_fn( lapack_const(PlasmaConjTrans), 'N',
             descA->mb, tempnn, descA->mb,
             mzone, (cuDoubleComplex*)A, ldak,
                    (cuDoubleComplex*)B, ldak,
             zone,  (cuDoubleComplex*)C, ldam );
    status = cublasGetError();
    PARSEC_CUDA_CHECK_ERROR( "cublasZgemm ", status,
                            {return -1;} );

    printlogcuda("CUDA_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
                 m, n, k,
                 plasma_const( PlasmaConjTrans ),  plasma_const( PlasmaNoTrans ),
                 descA->mb, tempnn, descA->nb,
                 -1.0, k, m, A, ldak,
                       k, n, B, ldak,
                  1.0, m, n, C, ldam);
}
END

BODY [type=RECURSIVE]
{
    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;

    if ( (tempnn > smallnb) || (descA->mb > smallnb) )
    {
        subtile_desc_t *small_descA;
        subtile_desc_t *small_descB;
        subtile_desc_t *small_descC;
        parsec_taskpool_t *parsec_zgemm;

        small_descA = subtile_desc_create( descA, k, m,
                                           smallnb, smallnb, 0, 0, descA->mb, descA->nb );
        small_descA->mat = A;

        small_descB = subtile_desc_create( descA, k, n,
                                           smallnb, smallnb, 0, 0, descA->mb, tempnn );
        small_descB->mat = B;

        small_descC = subtile_desc_create( descA, m, n,
                                           smallnb, smallnb, 0, 0, descA->mb, tempnn );
        small_descC->mat = C;

        parsec_zgemm = dplasma_zgemm_New(PlasmaConjTrans, PlasmaNoTrans,
                                        (parsec_complex64_t)-1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descA,
                                        (parsec_tiled_matrix_dc_t *)small_descB,
                                        (parsec_complex64_t) 1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descC);

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zgemm, dplasma_zgemm_Destruct,
                             3, small_descA, small_descB, small_descC );

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go to CPU sequential kernel */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempnn = n == descA->nt-1 ? descA->n - n * descA->nb : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaConjTrans, PlasmaNoTrans,
               descA->mb, tempnn, descA->nb,
               (parsec_complex64_t)-1.0, A /*A(k, m)*/, ldak,
                                        B /*A(k, n)*/, ldak,
               (parsec_complex64_t) 1.0, C /*A(m, n)*/, ldam);
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             m, n, k,
             plasma_const( PlasmaConjTrans ),  plasma_const( PlasmaNoTrans ),
             descA->mb, tempnn, descA->nb,
             -1.0, k, m, A, ldak,
                   k, n, B, ldak,
              1.0, m, n, C, ldam);
}
END
