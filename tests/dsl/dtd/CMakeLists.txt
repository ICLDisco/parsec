link_libraries(tests_common)

parsec_addtest_executable(C dtd_test_pingpong SOURCES dtd_test_pingpong.c)
parsec_addtest_executable(C dtd_test_task_generation SOURCES dtd_test_task_generation.c)
parsec_addtest_executable(C dtd_test_war SOURCES dtd_test_war.c)
parsec_addtest_executable(C dtd_test_task_insertion SOURCES dtd_test_task_insertion.c)
parsec_addtest_executable(C dtd_test_null_as_tile SOURCES dtd_test_null_as_tile.c)
parsec_addtest_executable(C dtd_test_task_inserting_task SOURCES dtd_test_task_inserting_task.c)
parsec_addtest_executable(C dtd_test_flag_dont_track SOURCES dtd_test_flag_dont_track.c)
parsec_addtest_executable(C dtd_test_multiple_handle_wait SOURCES dtd_test_multiple_handle_wait.c)
parsec_addtest_executable(C dtd_test_broadcast SOURCES dtd_test_broadcast.c)
parsec_addtest_executable(C dtd_test_reduce SOURCES dtd_test_reduce.c)
parsec_addtest_executable(C dtd_test_allreduce SOURCES dtd_test_allreduce.c)
parsec_addtest_executable(C dtd_test_template_counter SOURCES dtd_test_template_counter.c)
parsec_addtest_executable(C dtd_test_untie SOURCES dtd_test_untie.c)
parsec_addtest_executable(C dtd_test_hierarchy SOURCES dtd_test_hierarchy.c)
parsec_addtest_executable(C dtd_test_task_placement SOURCES dtd_test_task_placement.c)
parsec_addtest_executable(C dtd_test_insert_task_interface SOURCES dtd_test_insert_task_interface.c)
parsec_addtest_executable(C dtd_test_data_flush SOURCES dtd_test_data_flush.c)
parsec_addtest_executable(C dtd_test_global_id_for_dc_assumed SOURCES dtd_test_global_id_for_dc_assumed.c)
parsec_addtest_executable(C dtd_test_explicit_task_creation SOURCES dtd_test_explicit_task_creation.c)
parsec_addtest_executable(C dtd_test_tp_enqueue_dequeue SOURCES dtd_test_tp_enqueue_dequeue.c)
parsec_addtest_executable(C dtd_test_interleave_actions SOURCES dtd_test_interleave_actions.c)
parsec_addtest_executable(C dtd_test_ce SOURCES dtd_test_ce.c)

parsec_addtest_executable(C dtd_test_new_tile SOURCES dtd_test_new_tile.c)
if( PARSEC_HAVE_LEVEL_ZERO )
  if(NOT TARGET MKL::MKL_DPCPP)
      find_package(MKL)
      if(NOT MKL_FOUND)
        message(WARNING "Could not find the package for MKL. Define the CMake variable MKL_ROOT to point to the directory holding MKLConfig.cmake, or the MKL_DIR environment variable to point to the same directory")
      endif(NOT MKL_FOUND)
  endif(NOT TARGET MKL::MKL_DPCPP)
  if(TARGET MKL::MKL_DPCPP)
      message(STATUS "MKL was found and target MKL::MKL_DPCPP is defined. Level-zero can be tested")
      parsec_addtest_executable(C dtd_test_simple_gemm_lz SOURCES dtd_test_simple_gemm_lz.c dtd_test_simple_gemm_lz_kernel.dpcpp.C)
      target_link_libraries(dtd_test_simple_gemm_lz PRIVATE MKL::MKL_DPCPP level_zero::ze_loader m)
      find_package(BLAS)
      if(BLAS_FOUND)
        target_link_libraries(dtd_test_simple_gemm_lz PRIVATE ${BLAS_LIBRARIES})
        target_include_directories(dtd_test_simple_gemm_lz PRIVATE ${BLAS_INCLUDE_DIRS})
       target_compile_definitions(dtd_test_simple_gemm_lz PRIVATE HAVE_BLAS=1)
     endif(BLAS_FOUND)
  endif(TARGET MKL::MKL_DPCPP)
elseif( PARSEC_HAVE_CUDA )
  parsec_addtest_executable(C dtd_test_cuda_task_insert SOURCES dtd_test_cuda_task_insert.c)
  if( TARGET CUDA::cublas )
    parsec_addtest_executable(C dtd_test_simple_gemm SOURCES dtd_test_simple_gemm.c)
    target_link_libraries(dtd_test_simple_gemm PRIVATE CUDA::cublas m)
    find_package(BLAS)
    if(BLAS_FOUND)
      target_link_libraries(dtd_test_simple_gemm PRIVATE ${BLAS_LIBRARIES})
      target_include_directories(dtd_test_simple_gemm PRIVATE ${BLAS_INCLUDE_DIRS})
      target_compile_definitions(dtd_test_simple_gemm PRIVATE HAVE_BLAS=1)
    endif(BLAS_FOUND)
    target_sources(dtd_test_new_tile PUBLIC dtd_test_new_tile_cuda_kernels.cu)
  endif( TARGET CUDA::cublas )
endif( PARSEC_HAVE_LEVEL_ZERO )
