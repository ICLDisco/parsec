extern "C" %{
/*
 * Copyright (c) 2019-2023 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 */

#include <sys/time.h>
#include <inttypes.h>
#include <string.h>
#include <stdlib.h>
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"

/**
 * This test stress the startup mechanism by generating NI*NJ*NK independent
 * tasks from the beginning. A sequential startup will incur a high overhead,
 * while a more parallel startup will mitigate this overhead.
 *
 * The behavior of the test is altered by the defined priority, -1 and 1 is
 * for an increasing priority, respectively decreasing, 0 is for no priority
 * and 2 is for a random behavior. The generated priory is global, but it does
 * not impose a strict scheduling.
 */
%}

descA      [type = "parsec_matrix_block_cyclic_t*"]
NI         [type = int]
NJ         [type = int]
NK         [type = int]
pri        [type = int default = 0 hidden = on]

STARTUP(i, j, k)

  i = 0 .. NI-1
  j = 0 .. NJ-1
  k = 0 .. NK-1

  valid1 = i == 1 && j == 1
  valid2 = (i == 1) && (j == 1)

  prio = %{ return pri == 2 ? (int)(random()) : ((NJ*NK*i + NK*j + k)*pri); %}

  : descA(i,0)

  READ A <- descA(i, 0)
         -> descA(i, 0)

    ; prio

BODY
{
#if defined(DEBUG_STARTUP_TASK)
    fprintf(stderr, "priority(%d, %d, %d): %d\n",
            i, j, k, prio );
#endif
    assert(valid1 == valid2);
}
END

extern "C" %{

#define NN    10
#define TYPE  PARSEC_MATRIX_FLOAT

struct my_priority_s {
    int prio;
    char* message;
} priorities[] = {
    { .prio = -1, .message = "Decreasing priority" },
    { .prio =  0, .message = "No priority" },
    { .prio =  1, .message = "Increasing priority" },
    { .prio =  2, .message = "Random priority" },
    { .prio =  0, .message = NULL}};

#define TIMER_START(TIMER)                      \
    do {                                        \
        struct timeval tv;                      \
        gettimeofday(&tv,NULL);                 \
        (TIMER) = tv.tv_sec * 1e6 + tv.tv_usec; \
    } while (0)

#define TIMER_STOP(TIMER)                                   \
    do {                                                    \
        struct timeval tv;                                  \
        gettimeofday(&tv,NULL);                             \
        (TIMER) = (tv.tv_sec * 1e6 + tv.tv_usec) - (TIMER); \
    } while (0)

int main( int argc, char** argv )
{
    parsec_startup_taskpool_t* tp;
    parsec_matrix_block_cyclic_t descA;
    parsec_arena_datatype_t adt;
    parsec_datatype_t dt;
    parsec_context_t *parsec;
    int ni = NN, nj = NN, nk = NN, verbose = 0, i = 1, rc;
    long time_elapsed;

#ifdef PARSEC_HAVE_MPI
    {
        int provided;
        MPI_Init_thread(NULL, NULL, MPI_THREAD_SERIALIZED, &provided);
    }
#endif

    int pargc = 0; char **pargv = NULL;
    for( i = 1; i < argc; i++) {
        if( 0 == strncmp(argv[i], "--", 3) ) {
            pargc = argc - i;
            pargv = argv + i;
            break;
        }
        if( 0 == strncmp(argv[i], "-i=", 3) ) {
            ni = strtol(argv[i]+3, NULL, 10);
            continue;
        }
        if( 0 == strncmp(argv[i], "-j=", 3) ) {
            nj = strtol(argv[i]+3, NULL, 10);
            continue;
        }
        if( 0 == strncmp(argv[i], "-k=", 3) ) {
            nk = strtol(argv[i]+3, NULL, 10);
            continue;
        }
        if( 0 == strncmp(argv[i], "-v=", 3) ) {
            verbose = strtol(argv[i]+3, NULL, 10);
            continue;
        }
    }

    parsec = parsec_init(-1, &pargc, &pargv);
    if( NULL == parsec ) {
       exit(-1);
    }

    /**
     * Build the data and the arena to hold it up.
     */
    parsec_matrix_block_cyclic_init( &descA, TYPE, PARSEC_MATRIX_TILE,
                               0 /*rank*/,
                               NN, NN, ni * NN, NN,
                               0, 0, ni * NN, NN, 1, 1, 1, 1, 0, 0);
    descA.mat = parsec_data_allocate( descA.super.nb_local_tiles *
                                     descA.super.bsiz *
                                     parsec_datadist_getsizeoftype(TYPE) );

    parsec_translate_matrix_type(TYPE, &dt);
    parsec_add2arena_rect(&adt, dt,
                                 descA.super.mb, descA.super.nb, descA.super.mb);

    srandom((int)getpid());  /* Start the random generator */

    /* Start the PaRSEC engine */
    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");

    /* Heat up the engine: small tasks no priority */
    tp = parsec_startup_new( &descA, ni, nj, nk );
    assert( NULL != tp );
    tp->arenas_datatypes[PARSEC_startup_DEFAULT_ADT_IDX] = adt;
    PARSEC_OBJ_RETAIN(adt.arena);

    tp->_g_pri = 0;
    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");
    rc = parsec_context_wait(parsec);
    parsec_taskpool_free(&tp->super);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    for(i = 0; NULL != priorities[i].message; i++) {

        /* Start the PaRSEC engine */
        rc = parsec_context_start(parsec);
        PARSEC_CHECK_ERROR(rc, "parsec_context_start");

        tp = parsec_startup_new( &descA, ni, nj, nk );
        assert( NULL != tp );

        TIMER_START(time_elapsed);
        tp->arenas_datatypes[PARSEC_startup_DEFAULT_ADT_IDX] = adt;
        PARSEC_OBJ_RETAIN(adt.arena);
        tp->_g_pri = priorities[i].prio;

        rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
        PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

        TIMER_STOP(time_elapsed);
        printf("DAG construction [%s] in %ld micro-sec\n",
               priorities[i].message, time_elapsed);
        if( verbose >= 5 ) {
            printf("<DartMeasurement name=\"%s\" type=\"numeric/double\"\n"
                   "                 encoding=\"none\" compression=\"none\">\n"
                   "%g\n"
                   "</DartMeasurement>\n",
                   priorities[i].message, (double)time_elapsed);
        }
        TIMER_START(time_elapsed);
        parsec_context_wait(parsec);
        parsec_taskpool_free(&tp->super);
        TIMER_STOP(time_elapsed);
        printf("DAG execution [%s] in %ld micro-sec\n",
               priorities[i].message, time_elapsed);
    }

    free(descA.mat);
    PARSEC_OBJ_RELEASE(adt.arena);
    parsec_del2arena( & adt );

    parsec_fini( &parsec);

#ifdef PARSEC_HAVE_MPI
    MPI_Finalize();
#endif

    return 0;
}

%}
