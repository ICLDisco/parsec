extern "C" %{
/*
 * Copyright (c) 2015-2023 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 *
 */

#include <time.h>
#include "strange.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"

struct prev_next_s {
  int prev;
  int next;
};
/**
 * This test build a chain using different different local variables
 * and inlined functions. The local variable m is not necessary for the
 * functioning of the test, it is there for validation purposes.
 */
%}

N         [type = int]
VAL       [type = "int*"]
first     [type = double]
second    [type = float
           hidden = on
           default = "(float)5.2"]
neworder  [type = "struct prev_next_s*" hidden = on default = "NULL"]
//           default = "inline_C %{ return (float)5.2; %}"]

/**************************************************
 *                      START                     *
 **************************************************/
START(k)
 k = %{return *VAL;%} .. %{return *VAL;%}

 // Parallel partitioning
: descA(%{return neworder[0].next;%}, 0)

RW A <- descA(%{return neworder[0].next;%}, 0)
     -> A TASK(%{return neworder[0].next;%}, 0)
BODY
    printf("Start: launch Task(%d)\n", neworder[0].next);
END

/**************************************************
 *                       TASK                     *
 **************************************************/
TASK(k, step)
 k = 0 .. (%{ return N; %} - 1) .. %{ return 1; %}
 step = 0 .. N .. (N+1)  // only one valid value
 n = %{ return k + 1; %}
 m = %{ return k + 1; %}

// Parallel partitioning
:descA(k, 0)

RW A <- (0 == step) ? A START(0) : A TASK(inline_c%{return neworder[k].prev; %}, step-1)
     -> (step < (N-1)) ? A TASK(inline_c%{ return neworder[k].next; %}, step+1)

BODY
{
    printf("Task(%d) val %d\n", k, *VAL);
    (*VAL) += 1;
}
END

extern "C" %{

#define TYPE  PARSEC_MATRIX_FLOAT
static parsec_matrix_block_cyclic_t descA;

static void print_prev_next(char* msg, struct prev_next_s* no, int length)
{
    int i;
    printf("\n%s\n", msg);
    for( i = 0; i < length; i++ )
        printf("%4d ", no[i].prev);
    printf("\n");
    for( i = 0; i < length; i++ )
        printf("%4d ", no[i].next);
    printf("\n");
}

int main(int argc, char* argv[] )
{
    parsec_context_t *parsec;
    parsec_strange_taskpool_t* tp;
    int i = 0, n = 10000, val = 0, verbose = 0, rc;
    struct prev_next_s* neworder;

    /* We want a non-deterministic behavior unless requested via args */
    srand(time(NULL));

    int pargc = 0; char **pargv = NULL;
    for( i = 1; i < argc; i++) {
        if( 0 == strncmp(argv[i], "--", 3) ) {
            pargc = argc - i;
            pargv = argv + i;
            break;
        }
        if( 0 == strncmp(argv[i], "-deterministic", 7) ) {
            srand(n);
            continue;
        }
        if( 0 == strncmp(argv[i], "-n=", 3) ) {
            n = strtol(argv[i]+3, NULL, 10);
            continue;
        }
        if( 0 == strncmp(argv[i], "-v", 2) ) {
            verbose++;
            continue;
        }
    }
    neworder = calloc(n, sizeof(struct prev_next_s));
    for( i = 0; i < n; i++ ) {

        /* loop until we hit a not yet picked random number */
        do {
            val = (rand() % (n));  /* random value between 0 and n */
            if( 0 == neworder[val].prev ) {  /* did we picked this number before */
                neworder[i].next = val;
                neworder[val].prev = -1;
                if( verbose > 1 )
                    printf(" idx %d -> select %d\n", i, val);
                break;
            }
        } while (1);
    }
    if( verbose > 1 ) {
        print_prev_next("After randomization", neworder, n);
    }
    /* build the list of prev according to the next (which is still position indexed) */
    neworder[neworder[0].next].prev = neworder[n-1].next;
    for( i = 1; i < n; i++ ) {
        neworder[neworder[i].next].prev = neworder[i-1].next;
    }
    if( verbose > 1 ) {
        print_prev_next("Prev fixed", neworder, n);
    }
    /* build the list of next from prev */
    for( i = 0; i < n; i++ ) {
        neworder[neworder[i].prev].next = i;
    }
    if( verbose ) {
        print_prev_next("Random array", neworder, n);
    }

#ifdef PARSEC_HAVE_MPI
    {
        int provided;
        MPI_Init_thread(NULL, NULL, MPI_THREAD_SERIALIZED, &provided);
    }
#endif

    parsec = parsec_init(-1, &pargc, &pargv);
    assert( NULL != parsec );

    parsec_matrix_block_cyclic_init( &descA, TYPE, PARSEC_MATRIX_TILE,
                               0 /*rank*/,
                               1, 1, n, 1,
                               0, 0, n, 1,
                               1, 1, 1, 1, 0, 0);
    descA.mat = parsec_data_allocate( descA.super.nb_local_tiles *
                                     descA.super.bsiz *
                                     parsec_datadist_getsizeoftype(TYPE) );

    val = 0;
    tp = parsec_strange_new( (parsec_data_collection_t*)&descA, n, &val, 2.5 );
    assert( NULL != tp );
    ((parsec_strange_taskpool_t*)tp)->_g_neworder = neworder;

    /* Datatype not needed for a single node test */
    parsec_arena_datatype_construct( &tp->arenas_datatypes[PARSEC_strange_DEFAULT_ADT_IDX],
                                     descA.super.mb * descA.super.nb * parsec_datadist_getsizeoftype(TYPE),
                                     PARSEC_ARENA_ALIGNMENT_SSE,
                                     PARSEC_DATATYPE_NULL);  /* change for distributed cases */

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp );
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");

    parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    parsec_taskpool_free(&tp->super);

    free(descA.mat);
    parsec_fini( &parsec);

#ifdef PARSEC_HAVE_MPI
    MPI_Finalize();
#endif

    if( val != n ) {
        printf("Failed execution (%d != %d)\n", val, n);
        return -1;
    }
    return 0;
}

%}

