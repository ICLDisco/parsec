extern "C" %{
/*
 * Copyright (c) 2013-2022 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
%}

A          [type = "parsec_matrix_block_cyclic_t*"]
NT         [type = int]

STARTUP(k)

  k = 0 .. NT
: A(k,0)

  WRITE A1 -> A2 TASK1(k)
BODY
  printf("STARTUP(%d)\n", k);
END

TASK1(k)
  k = 0 .. NT
: A(k,0)

  WRITE A3 -> A1 TASK2(k)
  RW    A1 <- A(k,0)
           -> A2 TASK2(k)
  READ  A2 <- A1 STARTUP(k)

BODY
  printf("TASKS1(%d)\n", k);
END

TASK2(k)
  k = 0 .. NT
: A(k,0)

  READ A1 <- A3 TASK1(k)
  RW   A2 <- A1 TASK1(k)
          -> A(k, 0)

BODY
  printf("TASKS2(%d)\n", k);
END

extern "C" %{

#define TYPE  PARSEC_MATRIX_FLOAT
static parsec_matrix_block_cyclic_t descA;

parsec_taskpool_t* touch_initialize(int block, int n)
{
    parsec_touch_taskpool_t* tp;
    parsec_datatype_t dt;

    parsec_matrix_block_cyclic_init( &descA, TYPE, PARSEC_MATRIX_TILE,
                               0 /*rank*/,
                               block, block, n, n,
                               0, 0, n, n,
                               1, 1, 1, 1, 0, 0);
    descA.mat = parsec_data_allocate( descA.super.nb_local_tiles *
                                     descA.super.bsiz *
                                     parsec_datadist_getsizeoftype(TYPE) );

    tp = parsec_touch_new( &descA, ((n + block - 1) / block) - 1 );
    assert( NULL != tp );

    parsec_translate_matrix_type(TYPE, &dt);
    parsec_add2arena_rect( &tp->arenas_datatypes[PARSEC_touch_DEFAULT_ADT_IDX],
                                  dt, descA.super.mb, descA.super.nb, descA.super.mb );

    return &tp->super;
}

int touch_finalize(void)
{
    free(descA.mat);

    return 0;
}

%}

