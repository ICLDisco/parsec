extern "C" %{
/*
 * Copyright (c) 2013-2022 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */
#include "parsec/data_distribution.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data.h"
#include "parsec/utils/mca_param.h"
#include "parsec/arena.h"

#define RED_OP(_A, _B) (_A + _B)
#define TYPE(_X) INT(_X)

#define INT(_X) ( (int *)(_X) )
#define OFFSET(_X,_i) ( *(TYPE(_X)+(_i)) )
#define REDUCE(_A, _B, _i) OFFSET(_B,_i) = RED_OP( OFFSET(_A,_i), OFFSET(_B,_i) )

int compute_offset(int N, int t){
    uint32_t i, cnt=0, offset=0;

    for(i=0; i<8*sizeof(N); i++){
        if( (1<<i)&N ){
            cnt++;
        }
        if( cnt == (uint32_t)t )
            return offset;

        if( (1<<i)&N ){
            offset += (1<<i);
        }
    }
    assert(0);
    return 0xffffffff;
}

int count_bits(int N){
    uint32_t i, cnt=0;
    for(i=0; i<8*sizeof(N); i++){
        if( (1<<i)&N ){
            cnt++;
        }
    }
    return cnt;
}

int log_of_tree_size(int N, int t){
    uint32_t i, cnt=0;
    for(i=0; i<8*sizeof(N); i++){
        if( (1<<i)&N ){
            cnt++;
        }
        if( cnt == (uint32_t)t ) return i;
    }
    assert(0);
    return 0xffffffff;
}

int index_to_tree(int N, int idx){
    uint32_t i, cnt=0;
    for(i=0; i<8*sizeof(N); i++){
        if( (1<<i)&N ){
            cnt++;
            if( idx < (1<<i) )
                return cnt;
            else
                idx -= (1<<i);
        }
    }
    assert(0);
    return 0xffffffff;
}

int global_to_local_index(int N, int idx){
    uint32_t i;
    for(i=0; i<8*sizeof(N); i++){
        if( (1<<i)&N ){
            if( idx < (1<<i) )
                return idx;
            else
                idx -= (1<<i);
        }
    }
    assert(0);
    return 0xffffffff;
}

%}

%option no_taskpool_instance = true  /* can be anything */

dataA      [type = "parsec_tiled_matrix_t *"]
NB         [type = int]
NT         [type = int]


/*
 *
 */
REDUCTION(i)
  // Execution space
  i  = 0..NT-1
  t  = %{ return index_to_tree(NT,i); %}
  li = %{ return global_to_local_index(NT,i); %}
  sz = %{ return log_of_tree_size(NT, t); %}

  : dataA(i,0)

  RW A <- dataA(i,0)
       -> ((sz>0) && (0==li%2)) ? A BT_REDUC(t,1,li/2)
       -> ((sz>0) && (0!=li%2)) ? B BT_REDUC(t,1,li/2)
       -> (sz==0) ? C LINEAR_REDUC(1)
BODY
      *TYPE(A) = i;
END

/*
 *
 */
BT_REDUC(t,s,i)
  // Execution space
  tree_count  = %{ return count_bits(NT); %}
  t  = 1 .. tree_count
  sz = %{ return log_of_tree_size(NT, t); %}
  s  = 1 .. sz
  lvl = sz-s
  i  = 0 .. %{ return (1<<lvl)-1; %}
  offset = %{return compute_offset(NT, t); %}

  // Parallel partitioning
  : dataA(offset+i*2,0)

  // Parameters

  READ  A  <- (1==s) ? A REDUCTION(offset+i*2) : B BT_REDUC(t,s-1,i*2)

  RW    B  <- (1==s)                ? A REDUCTION(offset+i*2+1) : B BT_REDUC(t, s-1, i*2+1)
           -> ((sz!=s) && (0==i%2)) ? A BT_REDUC(t, s+1, i/2)
           -> ((sz!=s) && (0!=i%2)) ? B BT_REDUC(t, s+1, i/2)
           -> (sz==s)               ? C LINEAR_REDUC(t)

BODY
  int j;

  for(j=0; j<NB; j++){
      REDUCE( A, B, j );
  }

END


/*
 *
 */
LINEAR_REDUC(i)
  tree_count  = %{ return count_bits(NT); %}
  i  = 1 .. tree_count
  sz = %{ return log_of_tree_size(NT, i); %}
  offset = %{return compute_offset(NT, i); %}

  : dataA(offset,0)

  READ  B <- (tree_count==i) ? T LINE_TERMINATOR(0)
          <- (tree_count>i)  ? C LINEAR_REDUC(i+1)
  RW    C <- (0==sz) ? A REDUCTION(offset) 
          <- (0<sz)  ? B BT_REDUC(i, sz, 0)
          -> (1<i)  ? B LINEAR_REDUC(i-1)
       /* send the result to whoever needs it if "i==1" */
       /* -> (1==i) ? OUT() */
BODY
  int j;

  if( 1==i ){
      assert(0==offset);
  }

  /* if this is the first task in the chain then "B" is bogus. Ignore it. */
  if(tree_count!=i){
      for(j=0; j<NB; j++){
          REDUCE( B, C, j );
      }
  }

  if( 1==i && 0==((__parsec_tp->super.super.context)->my_rank) ) printf("%d\n", *TYPE(C)); 

END


LINE_TERMINATOR(j)
    j = 0..0
    tree_count = %{ return count_bits(NT); %}
    i = tree_count
    offset = %{return compute_offset(NT, i); %}

    : dataA(offset, 0)

    WRITE T -> B LINEAR_REDUC(tree_count)
BODY
 /* nothing */

END

