extern "C" %{
/*
 * Copyright (c)      2022 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */

#include "tree_dist.h"
#include <math.h>
#include "parsec/sys/atomic.h"

#define L 10.0

static double key_to_x(int n, int l)
{
  double scale = (2.0*L)*pow(2.0, -n);
  return -L + scale * (0.5 + l);
}

static double func(double alpha, double x) {
  return exp(-(x/alpha)*(x/alpha));
}

struct __parsec_project_dyn_PROJECT_task_s;

static parsec_key_t project_dyn_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as);

static int my_project_dyn_startup(parsec_execution_stream_t * es,
                              struct __parsec_project_dyn_PROJECT_task_s * this_task);
%}

%option dynamic = ON

// These are global variables that are instanciated in the main.c
treeA               [type = "tree_dist_t *"]
// The only type known to parsec is parsec_data_collection_t
NP                  [type = "int"]
fakeDesc            [type = "parsec_data_collection_t *"]
thresh              [type = "double"]
verbose             [type = "int"]
alpha               [type = "double"]

PROJECT (n, l) [ make_key_fn = project_dyn_make_key
                 startup_fn = my_project_dyn_startup ]
  n = 0 .. 31
  l = 0 .. (1<<n)
  larger_than_thresh = 1 // this is used to check if the error is > thresh

:treeA(n, l)

CTL RL <- (n!=0) ? RL PROJECT(n-1, l/2)
       -> larger_than_thresh ? RL PROJECT(n+1, (l*2) .. ((l*2)+1))

WRITE NODE <- NEW [ type=DEFAULT ]
           -> treeA(n, l)

BODY
{
    double err;
    double sl, sr;
    double d;

    sl = func(alpha, key_to_x(n+1, 2*l));
    sr = func(alpha, key_to_x(n+1, 2*l+1));

    d = 0.5 * (sl - sr);

    err = fabs(d) * pow(2.0, -0.5 * n);

    if ((n >= 8) && (err <= thresh)) {
        this_task->locals.larger_than_thresh.value = 0;
    } else {
      node_t *node = (node_t*)NODE;

      double sl, sr;

      if( verbose > 0 ) {
          int rank = (((parsec_data_collection_t*)treeA)->rank_of((parsec_data_collection_t*)treeA, n, l));
          fprintf(stdout, "CREATE_NODE( %d , %d ) on rank %d\n", n, l, rank);
      } 

      sl = func(alpha, key_to_x(n+1, 2*l));
      sr = func(alpha, key_to_x(n+1, 2*l+1));

      node->s = 0.5 * (sl + sr);
      node->d = 0.5 * (sl - sr);
      // To tell parsec to keep the reference of these two data, so it shouldn't delete them
      PARSEC_OBJ_RETAIN(_f_NODE);
      tree_dist_insert_data(treeA, _f_NODE->original, n, l);
    }   

    if( verbose > 0 ) {
        int rank = (((parsec_data_collection_t*)treeA)->rank_of((parsec_data_collection_t*)treeA, n, l));
        fprintf(stderr, "PROJECT(%d, %d) on rank %d, err = %g, larger_than_thresh = %d\n", n, l, rank, err, this_task->locals.larger_than_thresh.value);
    }

}
END

extern "C" %{

static parsec_key_t project_dyn_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as)
{
    (void)__tp;
    const struct __parsec_project_dyn_PROJECT_assignment_s * assignments = (const struct __parsec_project_dyn_PROJECT_assignment_s *)_as;
    return (parsec_key_t)(((uint64_t)assignments->n.value) << 32) | ((uint64_t)assignments->l.value);
}

static int my_project_dyn_startup(parsec_execution_stream_t * es, __parsec_project_dyn_PROJECT_task_t * this_task)
{
  __parsec_project_dyn_PROJECT_task_t *new_task;
  parsec_data_copy_t *chunk = NULL;
  __parsec_project_dyn_internal_taskpool_t *__tp = (__parsec_project_dyn_internal_taskpool_t *) this_task->taskpool;
  int vpid = 0;
  parsec_context_t *context = __tp->super.super.context;

  if ( ((parsec_data_collection_t *)__tp->super._g_treeA)->myrank != 0)
      return PARSEC_HOOK_RETURN_DONE;
  if (NULL != ((parsec_data_collection_t *) __tp->super._g_treeA)->vpid_of) {
      vpid = ((parsec_data_collection_t *) __tp->super._g_treeA)->vpid_of((parsec_data_collection_t *) __tp->super._g_treeA, 0, 0);
      assert(context->nb_vp >= vpid);
  }
  new_task = (__parsec_project_dyn_PROJECT_task_t *) parsec_thread_mempool_allocate(context->virtual_processes[0]->execution_streams[0]->context_mempool);
  new_task->status = PARSEC_TASK_STATUS_NONE;
  new_task->taskpool = this_task->taskpool;
  new_task->task_class = __tp->super.super.task_classes_array[project_dyn_PROJECT.task_class_id];
  new_task->chore_mask = 1<<0;

  new_task->locals.n.value = 0;
  new_task->locals.l.value = 0;
  new_task->locals.larger_than_thresh.value = 1;
  new_task->data._f_RL.source_repo = NULL;
  new_task->data._f_RL.source_repo_entry = NULL;
  new_task->data._f_RL.data_in = NULL;
  new_task->data._f_RL.data_out = NULL;
  new_task->data._f_NODE.source_repo = NULL;
  new_task->data._f_NODE.source_repo_entry = NULL;
  chunk = parsec_arena_get_new_copy(__tp->super.arenas_datatypes[PARSEC_project_dyn_DEFAULT_ADT_IDX].arena, 1, 0, __tp->super.arenas_datatypes[PARSEC_project_dyn_DEFAULT_ADT_IDX].opaque_dtt);
  chunk->original->owner_device = 0;
  new_task->data._f_NODE.data_out = chunk;
  new_task->data._f_NODE.data_in = chunk;
  new_task->data._f_NODE.source_repo = NULL;
  new_task->data._f_NODE.source_repo_entry = NULL;

  new_task->priority = 1;

  PARSEC_LIST_ITEM_SINGLETON(new_task);

  /* It is the user-specific function responsibility to count tasks
   * that it generates before scheduling them, knowing that 1 task is
   * already scheduled... So, nothing to do here since we just added
   * 1 task
   */
   parsec_atomic_fetch_add_int32(&__tp->initial_number_tasks, 1);
  __parsec_schedule(es, (parsec_task_t *)new_task, 0);

  (void)vpid;
  return PARSEC_HOOK_RETURN_DONE;
}

%}
