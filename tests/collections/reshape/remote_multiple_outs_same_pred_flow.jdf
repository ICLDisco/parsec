extern "C" %{
/*
 * Copyright (c) 2017-2022 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 */

#include "parsec/data_dist/matrix/matrix.h"


%}

descM  [type = "parsec_tiled_matrix_t*"]
descV  [type = "parsec_tiled_matrix_t*"]


/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(k)  [profile = off]

k = 0 .. descV->mt-1

: descV(k, 0)

RW A <- descV(k, 0)
     -> A TASK_A(k, 0..descV->mt-1)   [type_remote=UPPER_TILE]
     -> B TASK_A(k, 0..descV->mt-1)   [type_remote=LOWER_TILE]


BODY
{
}
END

/**************************************************
 *                       TASK_A                   *
 **************************************************/
TASK_A(m, k)  [profile = off]

m = 0 .. descM->mt-1
k = 0 .. descM->nt-1

: descM(m, k)


RW A
     <- A READ_A(m)        [type_remote=UPPER_TILE]
     -> descM(m, k)        [type=DEFAULT type_data=DEFAULT] //Write back full tile, otherwise remote has UPPER_TILE


READ B  <- A READ_A(m)     [type_remote=LOWER_TILE]

BODY
{
    /* Copy lower to A (which contains upper) and write back */
    for(int i = 0; i < descM->mb; i++){
        for(int j = 0; j < descM->nb; j++){
            if(j < i) {
                ((int*)A)[j*descM->mb + i] = ((int*)B)[j*descM->mb + i];
            }
        }
    }
}
END

