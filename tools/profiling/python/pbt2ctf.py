#!/usr/bin/env python3

import h5toctf
import sys
import os
import argparse

try:
    import pbt2ptt
except ModuleNotFoundError:
    print("Did not find pbt2ptt, you are likely using python version that does not match the version used to build PaRSEC profiling tools")
    print(sys.path)

def bool(str):
    return str.lower() in ["true", "yes", "y", "1", "t"]

def pbt_to_ctf(pbt_files_list, ctf_filename, **kwargs):
    print(f"Converting {pbt_files_list} into a HDF5 File")
    ptt_filename = pbt2ptt.convert(pbt_files_list, multiprocess=False)
    h5toctf.h5_to_ctf(ptt_filename, ctf_filename, **kwargs)

if __name__ == "__main__":
    parser = argparse.ArgumentParser( prof='pbt2ctf',
                                     description='Convert a set of PaRSEC binary profile files into a Perfetto profiling in JSON format')
    parser.add_argument('pbt_file_prefix', nargs=1, action='store', help='Prefix of the PaRSEC Binary Profile files')
    parser.add_argument('ctf_file_name', nargs=1, action='store', help='Name of the generated JSON file')
    parser.add_argument('--show-parsec-events', action='store_const', const='False', default='True', dest='skip_parsec_events', help='Include internal PaRSEC events in the trace' )
    parser.add_argument('--show-mpi-events', action='store_const', const='False', default='True', dest='skip_mpi_events', help='Include internal MPI events (generated by the PaRSEC internal comm engine) in the trace' )
    parser.add_argument('--key-is-part-of-task-name', action='store_const', const='True', default='False', dest='key_is_part_of_task_name', help='Include the key in the task name' )
    args = parser.parse_args()

    # iterate over all files within the directory that start with sys.argv[1]
    pbt_files_list=[]
    dirname = os.path.dirname(args.pbt_file_prefix[0])
    for file in os.listdir(dirname):
        file_fullname = os.path.join(dirname,file)
        if file_fullname.startswith(args.pbt_file_prefix[0]) and file_fullname.endswith(".prof") and file_fullname != args.ctf_file_name[0]:
            print("found file ", file_fullname)
            pbt_files_list.append(file_fullname)

    # to debug: read_pbt(pbt_files_list[0]), etc.
    pbt_to_ctf(pbt_files_list[0], args.ctf_file_name[0], **vars(args))
