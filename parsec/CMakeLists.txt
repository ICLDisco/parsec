# Add a blanket definition on everything that's built during the build stage.
# We do not use target_compile_definitions to avoid having to track all object
# libraries that could miss this otherwise.
add_compile_definitions(BUILDING_PARSEC)
add_compile_options("$<$<NOT:$<COMPILE_LANGUAGE:Fortran>>:${PARSEC_ATOMIC_SUPPORT_OPTIONS}>")


#
#  Settings for targets
#
set(BASE_SOURCES
  class/parsec_dequeue.c
  class/parsec_fifo.c
  class/parsec_lifo.c
  class/parsec_list.c
  class/parsec_object.c
  class/parsec_value_array.c
  class/parsec_hash_table.c
  class/parsec_rwlock.c
  class/parsec_future.c
  class/parsec_datacopy_future.c
  class/info.c
  class/parsec_future.c
  class/parsec_datacopy_future.c
  utils/argv.c
  utils/process_name.c
  utils/cmd_line.c
  utils/colors.c
  utils/parsec_environ.c
  utils/installdirs.c
  utils/keyval_parse.c
  utils/mca_param.c
  utils/mca_param_cmd_line.c
  utils/mca_parse_paramfile.c
  utils/os_path.c
  utils/output.c
  utils/show_help.c
  utils/zone_malloc.c
  utils/atomic_external.c
  utils/debug.c
  utils/win_compat.c
)

if(FLEX_FOUND AND BISON_FOUND)
  # generate in the build dir
  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/utils")
  flex_target(keyval_flex utils/keyval_lex.l utils/keyval_lex.l.c)
  flex_target(show_help_flex utils/show_help_lex.l utils/show_help_lex.l.c)

  # Generate in the pregen dir, add to the non-automated rule
  file(MAKE_DIRECTORY "${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/utils")
  flex_target(pregen_keyval_flex utils/keyval_lex.l ${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/utils/keyval_lex.l.c COMPILE_FLAGS --noline)
  flex_target(pregen_show_help_flex utils/show_help_lex.l ${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/utils/show_help_lex.l.c COMPILE_FLAGS --noline)
  add_custom_target(parsec_pregen_flex_utils SOURCES ${FLEX_pregen_keyval_flex_OUTPUTS} ${FLEX_pregen_show_help_flex_OUTPUTS})
  add_dependencies(parsec_pregen_flex_bison parsec_pregen_flex_utils)

else(FLEX_FOUND AND BISON_FOUND)
  # We are using the version controlled files generated by a PaRSEC dev
  set(FLEX_keyval_flex_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/utils/keyval_lex.l.c)
  set(FLEX_show_help_flex_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/utils/show_help_lex.l.c)
  # Copy from cold storage, and fail the compilation if sources get modified
  add_custom_command(
    OUTPUT ${FLEX_keyval_flex_OUTPUTS}
    DEPENDS ${PARSEC_PERGEN_FLEX_BISON_ARCHIVE} utils/keyval_lex.l # force reexecution if .l file changed (to check status)
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -Dsrcdir=${CMAKE_CURRENT_SOURCE_DIR} -Dsource=utils/keyval_lex.l -Dmissing=FLEX_FOUND -P ${PROJECT_SOURCE_DIR}/cmake_modules/pregen_flex_bison.cmake
    COMMAND ${CMAKE_COMMAND} -E tar x ${PARSEC_PREGEN_FLEX_BISON_ARCHIVE} -- parsec/utils/keyval_lex.l.c)
  add_custom_command(
    OUTPUT ${FLEX_show_help_flex_OUTPUTS}
    DEPENDS ${PARSEC_PREGEN_FLEX_BISON_ARCHIVE} utils/show_help_lex.l # force reexecution if .l file changed (to check status)
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -Dsrcdir=${CMAKE_CURRENT_SOURCE_DIR} -Dsource=utils/show_help_lex.l -Dmissing=FLEX_FOUND -P ${PROJECT_SOURCE_DIR}/cmake_modules/pregen_flex_bison.cmake
    COMMAND ${CMAKE_COMMAND} -E tar x ${PARSEC_PREGEN_FLEX_BISON_ARCHIVE} -- parsec/utils/show_help_lex.l.c)
endif(FLEX_FOUND AND BISON_FOUND)

list(APPEND BASE_SOURCES ${FLEX_keyval_flex_OUTPUTS} ${FLEX_show_help_flex_OUTPUTS})

if(PARSEC_FLEX_GENERATED_OPTIONS)
  set_source_files_properties(${FLEX_show_help_flex_OUTPUTS}
    PROPERTIES COMPILE_OPTIONS "${PARSEC_FLEX_GENERATED_OPTIONS}")
  set_source_files_properties(${FLEX_keyval_flex_OUTPUTS}
    PROPERTIES COMPILE_OPTIONS "${PARSEC_FLEX_GENERATED_OPTIONS}")
endif(PARSEC_FLEX_GENERATED_OPTIONS)

if( PARSEC_PAPI_SDE )
  list(APPEND EXTRA_SOURCES "papi_sde.c")
  list(APPEND EXTRA_LIBS PAPI::SDE)
endif( PARSEC_PAPI_SDE )

# find_package(TAU REQUIRED)
# include_directories(${TAU_INCLUDE_DIRS})
# message(WARNING ${TAU_INCLUDE_DIRS})
# list(APPEND EXTRA_LIBS ${TAU_LIBRARIES})
# set (CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib" ${TAU_LIBRARY_DIR})

if(NOT PARSEC_HAVE_OTF2)
  list(APPEND EXTRA_SOURCES "profiling.c")
  message(STATUS "Profiling uses PaRSEC Binary Tracing Format")
else(NOT PARSEC_HAVE_OTF2)
  list(APPEND EXTRA_SOURCES "profiling_otf2.c")
  list(APPEND EXTRA_LIBS "otf2")
  message(STATUS "Profiling uses OTF2")
endif(NOT PARSEC_HAVE_OTF2)

set(SOURCES
  arena.c
  barrier.c
  bindthread.c
  parsec.c
  parsec_reshape.c
  data.c
  data_distribution.c
  debug_marks.c
  mca/mca_repository.c
  mempool.c
  private_mempool.c
  remote_dep.c
  parsec_comm_engine.c
  parsec_mpi_funnelled.c
  remote_dep_mpi.c
  scheduling.c
  compound.c
  vpmap.c
  maxheap.c
  hbbuffer.c
  datarepo.c
  termdet.c)
if( PARSEC_PROF_TRACE )
  list(APPEND SOURCES dictionary.c)
endif( PARSEC_PROF_TRACE )
if( NOT MPI_C_FOUND )
  list(APPEND SOURCES datatype/datatype.c)
else( NOT MPI_C_FOUND )
  list(APPEND SOURCES datatype/datatype_mpi.c)
endif( NOT MPI_C_FOUND )
list(APPEND SOURCES parsec_hwloc.c)

if( PARSEC_PROF_GRAPHER )
  list(APPEND SOURCES
      parsec_prof_grapher.c)
endif( PARSEC_PROF_GRAPHER )

#
# Setup targets
#
if( BUILD_PARSEC )
  # As suggested @ https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/
  # create the target at the upper level and add sources to all directories below.
  if(NOT TARGET parsec)
    if( ${BUILD_SHARED_LIBS} )
      add_library(parsec SHARED)
    else( ${BUILD_SHARED_LIBS} )
      add_library(parsec STATIC)
    endif( ${BUILD_SHARED_LIBS} )
  endif(NOT TARGET parsec)
  add_library(PaRSEC::parsec ALIAS parsec)
endif( BUILD_PARSEC )

# Read the Modular Components
#   This must be read using include and not add_subdirectory because
#   we want the mca/CMakeLists.txt to export the MCA_EXTRA_SOURCES it builds.
set(MCA_ENABLED_FEATURES "" CACHE INTERNAL "List of enabled components in PaRSEC" FORCE)
include(mca/CMakeLists.txt)

# Import all the available Domain Specific Language interfaces
include(interfaces/CMakeLists.txt)
if(TARGET parsec-ptgpp)
  add_executable(PaRSEC::parsec-ptgpp ALIAS parsec-ptgpp)
endif(TARGET parsec-ptgpp)

if( BUILD_PARSEC )

  # Build this as a collection of objects that can be easily either used to
  # create an interface library or imported into the main library.
  if(NOT TARGET parsec-base-obj)
    add_library(parsec-base-obj OBJECT ${BASE_SOURCES})
  endif(NOT TARGET parsec-base-obj)
  target_compile_definitions(parsec-base-obj
    PRIVATE
    YYERROR_VERBOSE)
  target_compile_options(parsec-base-obj
    PUBLIC ${PARSEC_ATOMIC_SUPPORT_OPTIONS})
  target_include_directories(parsec-base-obj
    INTERFACE
    $<INSTALL_INTERFACE:${PARSEC_INSTALL_INCLUDEDIR}>
    $<$<NOT:${PARSEC_BUILD_INPLACE}>:
      $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
      $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/parsec/include>>
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/parsec/include>)
  target_link_libraries(parsec-base-obj
    PUBLIC
    ${PARSEC_ATOMIC_SUPPORT_LIBS}
    Threads::Threads
    $<$<BOOL:${PARSEC_HAVE_WS2_32}>:ws2_32>)
  set_target_properties(parsec-base-obj PROPERTIES POSITION_INDEPENDENT_CODE TRUE)

  # Include the parsec-base objects into the parsec-base library (for tools)
  if(NOT TARGET parsec-base)
    add_library(parsec-base STATIC)
    target_link_libraries(parsec-base PUBLIC parsec-base-obj)
  endif(NOT TARGET parsec-base)

  # Include the parsec-base object library into the parsec library
  target_sources(parsec PRIVATE $<IF:$<BOOL:PARSEC_SANITIZE_COMPILE_OPTIONS>,${BASE_SOURCES},$<TARGET_OBJECTS:parsec-base-obj>>)
  target_sources(parsec PRIVATE ${SOURCES} ${EXTRA_SOURCES} ${MCA_EXTRA_SOURCES})

  add_subdirectory(data_dist)

  target_compile_options(parsec
    PRIVATE
    $<$<COMPILE_LANGUAGE:C>:${PARSEC_SANITIZE_COMPILE_OPTIONS}>
    INTERFACE
    #for tests and examples
    $<BUILD_INTERFACE:$<$<COMPILE_LANGUAGE:C>:${PARSEC_SANITIZE_COMPILE_OPTIONS}>>)
  target_link_options(parsec
    PUBLIC
    ${PARSEC_SANITIZE_LINK_OPTIONS})
  target_compile_definitions(parsec
    PRIVATE
    YYERROR_VERBOSE)
  target_include_directories(parsec
    INTERFACE
    $<INSTALL_INTERFACE:${PARSEC_INSTALL_INCLUDEDIR}>
    $<$<NOT:${PARSEC_BUILD_INPLACE}>:
      $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
      $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/parsec/include>>
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/parsec/include>)
  target_link_libraries(parsec
    PRIVATE
    Threads::Threads
    $<$<BOOL:${PARSEC_SHM_OPEN_IN_LIBRT}>:rt>
    m
    PUBLIC
    $<$<BOOL:${PARSEC_HAVE_DLFCN_H}>:${CMAKE_DL_LIBS}> # Add support for dlopen if necessary
    $<$<BOOL:${HWLOC_FOUND}>:HWLOC::hwloc>
    $<$<BOOL:${PARSEC_HAVE_OTF2}>:OTF2::OTF2>
    $<$<BOOL:${MPI_C_FOUND}>:MPI::MPI_C>
    $<$<BOOL:${PARSEC_HAVE_CUDA}>:CUDA::cudart>
    $<$<BOOL:${PARSEC_HAVE_CUDA}>:cuda>
    $<$<BOOL:${PARSEC_HAVE_HIP}>:hip::host>
    ${EXTRA_LIBS}
    INTERFACE
    ${PARSEC_ATOMIC_SUPPORT_LIBS}
    )

  set_target_properties(parsec PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
  # For now make sure that the installed shared libraries have the right
  # version (same version as the major of the build version). Thus, every
  # change in the high-level API (and ABI) should be reflected on the
  # major version of PaRSEC.
  set_target_properties(parsec PROPERTIES VERSION ${PARSEC_VERSION_MAJOR}.${PARSEC_VERSION_MINOR}.${PARSEC_VERSION_RELEASE}
    SOVERSION ${PARSEC_VERSION_MAJOR})

  set_property(TARGET parsec
               APPEND PROPERTY
                      PUBLIC_HEADER include/parsec.h)

#
# If we have support for F90 build the PaRSEC module
#
  if(CMAKE_Fortran_COMPILER_SUPPORTS_F90)
    add_subdirectory(fortran)
  endif(CMAKE_Fortran_COMPILER_SUPPORTS_F90)

  install(TARGETS parsec
          EXPORT parsec-targets
          ARCHIVE DESTINATION ${PARSEC_INSTALL_LIBDIR}
          LIBRARY DESTINATION ${PARSEC_INSTALL_LIBDIR}
          PUBLIC_HEADER DESTINATION ${PARSEC_INSTALL_INCLUDEDIR})
  # Cmake < 3.20 does not support hierarchical PUBLIC and PRIVATE _HEADER,
  # so we need to provide our own support by crafting a similar property
  # PUBLIC_HEADER_H and PRIVATE_HEADER_H
  # Extract these properties and properly install the files respecting the
  # defined hierarchy
  get_target_property(_public_headers parsec PUBLIC_HEADER_H)
  foreach(_FILE ${_public_headers})
    get_filename_component(_DIR ${_FILE} DIRECTORY)
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${_FILE}")
      set(_FILE "${CMAKE_CURRENT_BINARY_DIR}/${_FILE}")
    endif()
    install(FILES ${_FILE} DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/${_DIR})
  endforeach()
  get_target_property(_private_headers parsec PRIVATE_HEADER_H)
  foreach(_FILE ${_private_headers})
    get_filename_component(_DIR ${_FILE} DIRECTORY)
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${_FILE}")
      set(_FILE "${CMAKE_CURRENT_BINARY_DIR}/${_FILE}")
    endif()
    install(FILES ${_FILE} DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/${_DIR})
  endforeach()

  install(FILES utils/help-mca-param.txt
          DESTINATION ${PARSEC_INSTALL_DATADIR}/parsec)
  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/runtime.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/ayudame.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/constants.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/parsec_config_bottom.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/data_distribution.h
          ${CMAKE_CURRENT_SOURCE_DIR}/datatype.h
          ${CMAKE_CURRENT_SOURCE_DIR}/profiling.h
          ${CMAKE_CURRENT_SOURCE_DIR}/dictionary.h
          ${CMAKE_CURRENT_SOURCE_DIR}/data.h
          ${CMAKE_CURRENT_SOURCE_DIR}/private_mempool.h
          ${CMAKE_CURRENT_SOURCE_DIR}/bindthread.h
          ${CMAKE_CURRENT_SOURCE_DIR}/parsec_comm_engine.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/deprecated.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec)

install(FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/utils/output.h
        ${CMAKE_CURRENT_SOURCE_DIR}/utils/debug.h
        ${CMAKE_CURRENT_SOURCE_DIR}/utils/mca_param.h
        DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/utils)
install(FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/class/parsec_object.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/parsec_hash_table.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/list_item.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/parsec_rwlock.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/fifo.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/barrier.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/list.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/info.h
        ${CMAKE_CURRENT_SOURCE_DIR}/class/parsec_future.h
        DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/class)
install(FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/scheduling.h
        ${CMAKE_CURRENT_SOURCE_DIR}/recursive.h
        ${CMAKE_CURRENT_SOURCE_DIR}/remote_dep.h
        ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/parsec_description_structures.h
        ${CMAKE_CURRENT_SOURCE_DIR}/datarepo.h
        ${CMAKE_CURRENT_SOURCE_DIR}/mempool.h
        ${CMAKE_CURRENT_SOURCE_DIR}/data_internal.h
        ${CMAKE_CURRENT_SOURCE_DIR}/arena.h
        ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/execution_stream.h
        ${CMAKE_CURRENT_SOURCE_DIR}/parsec_internal.h
        ${CMAKE_CURRENT_SOURCE_DIR}/vpmap.h
        DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec)
if(PARSEC_PROF_GRAPHER)
  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/parsec_prof_grapher.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec )
endif(PARSEC_PROF_GRAPHER)
# Install header files for jdf generated code
if( PARSEC_WITH_DEVEL_HEADERS )
  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/parsec_binary_profile.h
          ${CMAKE_CURRENT_SOURCE_DIR}/hbbuffer.h
          ${CMAKE_CURRENT_SOURCE_DIR}/include/parsec/os-spec-timing.h
          ${CMAKE_CURRENT_SOURCE_DIR}/maxheap.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec )

  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/mca/pins/pins_papi_utils.h
          ${CMAKE_CURRENT_SOURCE_DIR}/mca/pins/pins_tau_utils.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/mca/pins )

  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/argv.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/cmd_line.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/parsec_environ.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/mca_param_cmd_line.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/os_path.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/process_name.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/output.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/show_help.h
          ${CMAKE_CURRENT_SOURCE_DIR}/utils/zone_malloc.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/utils )

  install(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/class/dequeue.h
          ${CMAKE_CURRENT_SOURCE_DIR}/class/fifo.h
          DESTINATION ${PARSEC_INSTALL_INCLUDEDIR}/parsec/class )

endif(PARSEC_WITH_DEVEL_HEADERS)



endif( BUILD_PARSEC )


