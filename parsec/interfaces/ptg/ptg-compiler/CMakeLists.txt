# when crosscompiling the executable is imported from the
# export file.
if(NOT CMAKE_CROSSCOMPILING)

  if(FLEX_FOUND AND BISON_FOUND)
    # generate in the build dir
    bison_target(parsec_yacc parsec.y ${CMAKE_CURRENT_BINARY_DIR}/parsec.y.c)
    flex_target(parsec_flex parsec.l  ${CMAKE_CURRENT_BINARY_DIR}/parsec.l.c)
    add_flex_bison_dependency(parsec_flex parsec_yacc)

    # Generate in the pregen dir, add to the non-automated rule to update the archive
    file(MAKE_DIRECTORY "${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/interfaces/ptg/ptg-compiler")
    bison_target(pregen_parsec_yacc parsec.y ${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/interfaces/ptg/ptg-compiler/parsec.y.c COMPILE_FLAGS -l)
    flex_target(pregen_parsec_flex parsec.l ${PARSEC_PREGEN_FLEX_BISON_DIR}/parsec/interfaces/ptg/ptg-compiler/parsec.l.c COMPILE_FLAGS --noline)
    add_custom_target(parsec_pregen_ptg SOURCES ${BISON_pregen_parsec_yacc_OUTPUTS} ${FLEX_pregen_parsec_flex_OUTPUTS})
    add_dependencies(parsec_pregen_flex_bison parsec_pregen_ptg)

  else(FLEX_FOUND AND BISON_FOUND)
    # We are using the version controlled files generated by a PaRSEC dev
    set(BISON_parsec_yacc_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/parsec.y.c ${CMAKE_CURRENT_BINARY_DIR}/parsec.y.h)
    set(FLEX_parsec_flex_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/parsec.l.c)
    # Copy from cold storage, and fail the compilation if sources get modified
    add_custom_command(
      OUTPUT ${BISON_parsec_yacc_OUTPUTS}
      DEPENDS ${PARSEC_PERGEN_FLEX_BISON_ARCHIVE} parsec.y # force reexecution if .y file changed (to check status)
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
      COMMAND ${CMAKE_COMMAND} -Dsrcdir=${CMAKE_CURRENT_SOURCE_DIR} -Dsource=parsec.y -Dmissing=BISON_FOUND -P ${PROJECT_SOURCE_DIR}/cmake_modules/pregen_flex_bison.cmake
      COMMAND ${CMAKE_COMMAND} -E tar x ${PARSEC_PREGEN_FLEX_BISON_ARCHIVE} -- parsec/interfaces/ptg/ptg-compiler/parsec.y.c parsec/interfaces/ptg/ptg-compiler/parsec.y.h)
    add_custom_command(
      OUTPUT ${FLEX_parsec_flex_OUTPUTS}
      DEPENDS ${PARSEC_PERGEN_FLEX_BISON_ARCHIVE} parsec.l # force reexecution if .l file changed (to check status)
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
      COMMAND ${CMAKE_COMMAND} -Dsrcdir=${CMAKE_CURRENT_SOURCE_DIR} -Dsource=parsec.l -Dmissing=FLEX_FOUND -P ${PROJECT_SOURCE_DIR}/cmake_modules/pregen_flex_bison.cmake
      COMMAND ${CMAKE_COMMAND} -E tar x ${PARSEC_PREGEN_FLEX_BISON_ARCHIVE} -- parsec/interfaces/ptg/ptg-compiler/parsec.l.c)
  endif(FLEX_FOUND AND BISON_FOUND)

  if(PARSEC_FLEX_GENERATED_OPTIONS)
    set_source_files_properties(${FLEX_parsec_flex_OUTPUTS}
      PROPERTIES COMPILE_OPTIONS "${PARSEC_FLEX_GENERATED_OPTIONS}")
  endif(PARSEC_FLEX_GENERATED_OPTIONS)

  if(NOT TARGET parsec-ptgpp)
    add_executable(parsec-ptgpp jdf.c jdf2c.c jdf_unparse.c ${BISON_parsec_yacc_OUTPUTS} ${FLEX_parsec_flex_OUTPUTS})
  endif(NOT TARGET parsec-ptgpp)
  target_include_directories(parsec-ptgpp BEFORE PRIVATE
      ${CMAKE_CURRENT_SOURCE_DIR})
  target_include_directories(parsec-ptgpp PRIVATE
      ${CMAKE_CURRENT_BINARY_DIR})
  target_link_libraries(parsec-ptgpp PRIVATE m parsec-base)

  install(TARGETS parsec-ptgpp
    EXPORT parsec-targets
    RUNTIME DESTINATION ${PARSEC_INSTALL_BINDIR})

  list(APPEND MCA_ENABLED_FEATURES "interface::ptg")
  set( MCA_ENABLED_FEATURES ${MCA_ENABLED_FEATURES} CACHE INTERNAL "" FORCE)
  #
  # Generate the EXPORT file for external projects.
  #
  export(TARGETS parsec-ptgpp FILE "${CMAKE_BINARY_DIR}/ImportExecutables.cmake")
endif(NOT CMAKE_CROSSCOMPILING)

